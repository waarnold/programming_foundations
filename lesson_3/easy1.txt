Q1.  The numbers array is not modified by the uniq method call. Each element in
     the array will print on its own line, since 'puts' attaches a newline character.

     1
     2
     2
     3

Q2.  When found at the end of a method name, ! usually indicates that the method
     is mutative, while ? indicates that the method returns a boolean value. This
     is purely a naming convention, to offer a hint as to the usage of the method.
     Not all mutative methods end with !; not all methods that return booleans end with ?.

     Other uses of ! and ? (syntactic uses):

        a != b    'not equal.' tests whether a and b are not equivalent.
        !a        negates a, returning its opposite boolean value.
        !!a       double negation, returns the boolean value a.
        a!        for method a, indicates a call to the mutative/destructive form.
        ?a        evaluates to the default representation of a.
        a?        signals that method a will return a boolean. alternatively, ?
                  is ternary operator signaling a conditional statement.

Q3.  advice.sub!("important", "urgent")

Q4.  numbers.delete_at(1)
     => 2
     numbers = [1, 3, 4, 5]
     .delete_at deletes the element at the given index and returns that element.

     numbers.delete(1)
     => 1
     numbers = [2, 3, 4, 5]
     .delete deletes the given element and returns that element.

Q5.  42.between?(10, 100)
     (10..100).cover?(42)
     (10..100).include?(42)

Q6.  "Four score and " + famous_words
     "Four score and " << famous_words
     famous_words.prepend("Four score and ")

Q7.  2 + (5 * 8) = 42. The add_eight method is called 5 times recursively, with
     initial input of 2.

Q8.  flintstones.flatten!

Q9.  flintstones.assoc("Barney")

Q10. flintstones_hash = {}
     flintstones.each_with_index { |element, idx| flintstones_hash[element] = idx }
